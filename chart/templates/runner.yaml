{{ if .Values.runner.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-runner
  labels:
    app: {{ .Release.Name }}-runner
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-runner
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-runner
    spec:
      containers:
      - name: {{ .Release.Name }}-runner
        image: {{ .Values.runner.image.registry }}/{{ .Values.runner.image.name }}:{{ .Values.runner.image.tag }}
        imagePullPolicy: {{ .Values.runner.image.pullPolicy }}
        ports:
        - containerPort: 8081
          name: https
        command: ["/custom/prepare-runner-images.sh"]
        env:
          - name: BASH_DOCKER
            value: thmmniii/fbs-runtime-bash:latest
          - name: RUNNER_SQL_CHECKER_IMAGE
            value: thmmniii/fbs-sql-checker:latest
          - name: HOST_TMP_DIR
            value: /fbs-tmp
          - name: INSIDE_DOCKER
            value: "true"
          - name: RESULT_SERVER_HOST
            value: {{ .Release.Name }}-core
          - name: MYSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runner
                key: mysqlJdbclUri
          - name: MYSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runner
                key: mysqlUsername
          - name: MYSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-runner
                key: mysqlPassword
          - name: PSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runner
                key: psqlJdbclUri
          - name: PSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-runner
                key: psqlUsername
          - name: PSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-runner
                key: psqlPassword
          - name: RUNNER_SQL_CHECKER_DISABLE_NETWORK
            value: "true"
          {{ if .Values.runner.config.debug.disableContainerRemoval }}
          - name: RUNNER_DOCKER_DISABLE_REMOVE
            value: "true"
          {{ end }}
        resources:
          requests:
            cpu: {{ .Values.runner.resources.cpu.request }}
            memory: {{ .Values.runner.resources.memory.request }}
          limits:
            cpu: {{ .Values.runner.resources.cpu.limit }}
            memory: {{ .Values.runner.resources.memory.limit }}
        volumeMounts:
        - name: shared-tmp
          mountPath: /dockertemp
        - name: docker-socket
          mountPath: /var/run
        - name: upload-dir
          mountPath: /upload-dir
        - name: custom-runner-scripts
          mountPath: /custom
      - name: {{ .Release.Name }}-runner-docker
        image: {{ .Values.runner.dink.image.registry }}/{{ .Values.runner.dink.image.name }}:{{ .Values.runner.dink.image.tag }}
        imagePullPolicy: {{ .Values.runner.dink.image.pullPolicy }}
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: {{ .Values.runner.dink.resources.cpu.request }}
            memory: {{ .Values.runner.dink.resources.memory.request }}
          limits:
            cpu: {{ .Values.runner.dink.resources.cpu.limit }}
            memory: {{ .Values.runner.dink.resources.memory.limit }}
        volumeMounts:
        - name: shared-tmp
          mountPath: /fbs-tmp
        - name: docker-socket
          mountPath: /var/run/
        - name: docker-images
          mountPath: /var/lib/docker
      volumes:
      - name: shared-tmp
        emptyDir: {}
      - name: docker-socket
        emptyDir: {}
      - name: upload-dir
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-core-upload-dir
      - name: docker-images
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-runner-docker-images
      - name: custom-runner-scripts
        configMap:
          name: {{ .Release.Name }}-custom-runner-scripts
          defaultMode: 0555
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-runner
data:
  mysqlJdbclUri: {{ print "jdbc:mysql://" .Release.Name "-runner-mysql:3306?allowMultiQueries=true" }}
  psqlJdbclUri: {{ print "jdbc:postgresql://" .Release.Name "-runner-postgres:5432/?allowMultiQueries=true" }}
  mysqlUsername: 'root'
  psqlUsername: 'postgres'
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .Release.Name }}-runner
data:
  mysqlPassword: {{ .Values.runnerMysql.auth.rootPassword | b64enc }}
  psqlPassword: {{ .Values.runnerPostgres.auth.postgresPassword | b64enc }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-runner
  labels:
    app: {{ .Release.Name }}-runner
spec:
  selector:
    app: {{ .Release.Name }}-runner
  ports:
    - name: https
      protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-custom-runner-scripts
data:
  prepare-runner-images.sh: |
    #!/bin/sh
    set -e
    sleep 10 # ToDo: Wait for docker to be ready instead of fixed time
    docker pull "$BASH_DOCKER"
    docker pull "$RUNNER_SQL_CHECKER_IMAGE"
    ./fbs-runner.checker run scala:de.thm.ii.fbs.MainVerticle
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-runner-docker-images
spec:
  accessModes:
    - {{ .Values.runner.dink.volumes.images.mode }}
  volumeMode: Filesystem
  resources:
    requests:
      storage: {{ .Values.runner.dink.volumes.images.size }}
{{ end }}
