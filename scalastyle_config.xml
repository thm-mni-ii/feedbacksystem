<scalastyle commentFilter="enabled">
    <name>Scalastyle standard configuration</name>
    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[1000]]></parameter>
        </parameters>
    </check>
    <check enabled="false" class="org.scalastyle.scalariform.ScalaDocChecker" level="error">
        <!--<parameters>
            <parameter name="ignoreRegex">(.*Spec$)|(.*SpecIT$)</parameter>
            <parameter name="ignoreTokenTypes">PatDefOrDcl,TypeDefOrDcl,FunDefOrDcl,TmplDef</parameter>
            <parameter name="ignoreOverride">true</parameter>
            <parameter name="indentStyle">anydoc</parameter>
        </parameters>-->
    </check>
    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[160]]></parameter>
            <parameter name="tabSize"><![CDATA[4]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[8]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="false"/>
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[\sprint\(]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[\.printStackTrace]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[util\.Map]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[JavaConversions]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[40]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>
    <check level="error" class="org.scalastyle.scalariform.WhileChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.VarFieldChecker" enabled="false"/>
    <check level="error" class="org.scalastyle.scalariform.VarLocalChecker" enabled="false"/>
    <check level="error" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[@author]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="false"/>
    <check level="error" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"/>
    <check level="warn" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="true">
        <parameters>
            <parameter name="allowed"><![CDATA[8]]></parameter>
            <parameter name="ignoreRegex"><![CDATA[^""$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="true"/>
    <check enabled="true" class="org.scalastyle.file.RegexChecker" level="error">
        <parameters>
            <parameter name="regex">(?m)^\s*$(\r|)\n^\s*$(\r|)\n</parameter>
            <parameter name="line">false</parameter>
        </parameters>
        <customMessage>No double blank lines</customMessage>
    </check>
    <check enabled="true" class="org.scalastyle.scalariform.IfBraceChecker" level="error"/>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>
    <check enabled="true" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" level="error">
        <parameters>
            <parameter name="tokens">COLON, COMMA, RPAREN</parameter>
        </parameters>
    </check>
    <check enabled="true" class="org.scalastyle.file.RegexChecker" level="error">
        <parameters>
            <parameter name="regex"><![CDATA[\{\s*\n\s*\n]]></parameter>
            <parameter name="line">false</parameter>
        </parameters>
        <customMessage>Blank line at start of block should be removed</customMessage>
    </check>
    <check enabled="true" class="org.scalastyle.file.RegexChecker" level="error">
        <parameters>
            <parameter name="regex">(?m)^\s*$(\r|)\n^\s*}$</parameter>
            <parameter name="line">false</parameter>
        </parameters>
        <customMessage>Blank line at end of block should be removed</customMessage>
    </check>
    <check customId="commonslang2" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters><parameter name="regex">org\.apache\.commons\.lang\.</parameter></parameters>
        <customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead
            of Commons Lang 2 (package org.apache.commons.lang.*)</customMessage>
    </check>
    <check customId="OverrideJavaCase" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters><parameter name="regex">^Override$</parameter></parameters>
        <customMessage>override modifier should be used instead of @java.lang.Override.</customMessage>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>
</scalastyle>
